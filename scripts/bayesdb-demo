#!/usr/bin/env python

# -*- coding: utf-8 -*-

#   Copyright (c) 2010-2016, MIT Probabilistic Computing Project
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import getopt
import os
import shutil
import StringIO
import sys
import bdbcontrib.version
import bayeslite.version
import crosscat.version

def usage(out):
    out.write('Usage: %s [options]\n' % (progname(),))
    out.write('          Fetch if needed, then launch.\n')
    out.write('       %s [options] fetch\n' % (progname(),))
    out.write('          Copy demos below the destination directory.\n')
    out.write('       %s [options] maybefetch\n' % (progname(),))
    out.write('          Copy demos if they are not already present.\n')
    out.write('       %s [options] launch\n' % (progname(),))
    out.write('          Start an ipython notebook in the example directory.\n')

def version(out):
    out.write('Bayeslite distribution (bdbcontrib) version: %s\n' %
              (bdbcontrib.version.__version__,))
    out.write('   Bayeslite core version: %s\n' %
              (bayeslite.version.__version__,))
    out.write('   Default metamodel (CrossCat) version: %s\n' %
              (crosscat.version.__version__,))

def progname():
    return os.path.basename(sys.argv[0])

def fetch(directory):
    lib_bdbcontrib = os.path.dirname(bdbcontrib.version.__file__)
    venv_bdbcontrib = os.path.join(os.path.dirname(os.path.dirname(__file__)),
                                   "bdbcontrib")
    path = [lib_bdbcontrib, venv_bdbcontrib]
    found = False
    for bdbcontribdir in path:
        source = os.path.join(bdbcontribdir, "examples")
        if os.path.exists(source):
            found = True
            print "Copying", source, "to", directory
            shutil.copytree(source, directory)
            break
    if not found:
        raise ValueError("Did not find the bdbcontrib/examples directory in " +
                         repr(path))

def launch(directory):
    try:
        os.execlp('ipython', 'ipython', 'notebook', directory)
    except Exception as e:
        sys.stderr.write('%s: %s\n' % (progname(), str(e)))
        sys.stderr.write('%s: failed to launch ipython\n' % (progname(),))
        sys.exit(1)


def main():
    import optparse
    usage_text = StringIO.StringIO()
    usage(usage_text)
    parser = optparse.OptionParser(usage=usage_text.getvalue())
    # -h or --help is automatic with usage= above.
    parser.add_option('-v', '--version',
                      help='Print the software and component versions.',
                      dest='version', default=False, action='store_true')
    parser.add_option('-d', '--destination',
                      help='Parent directory for the examples.',
                      dest='destination', default='.', action='store')
    options, args = parser.parse_args()

    if options.version:
        version(sys.stderr)
        sys.exit(0)

    if not args:
        args = ("maybefetch", "launch")

    bayesname = "Bayeslite-v%s" % (bdbcontrib.version.__version__,)
    destination = os.path.join(options.destination, bayesname)
    for arg in args:
        if arg == "maybefetch":
            if not os.path.exists(destination):
                fetch(destination)
        elif arg == "fetch":
            fetch(destination)
        elif arg == "launch":
            launch(destination)
        else:
            usage(sys.stderr)
            sys.exit(1)

assert __name__ == '__main__'
main()
